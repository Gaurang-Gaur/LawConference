{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaura\\\\OneDrive\\\\Desktop\\\\logins\\\\client\\\\src\\\\components\\\\Main\\\\Screen.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useCallback, useState } from \"react\";\nimport ReactPlayer from \"react-player\";\nimport { useSocket } from \"../../context/SocketProvider\";\nimport peer from \"../../service/peer\"; // return object:0\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst RoomPage = () => {\n  _s();\n\n  const [remoteSocketId, setRemoteSocketId] = useState(null);\n  const [myStream, setMyStream] = useState();\n  const [remoteStream, setRemoteStream] = useState();\n  const socket = useSocket();\n  const handleUserJoined = useCallback(_ref => {\n    let {\n      email,\n      id\n    } = _ref;\n    console.log(`Email ${email} joined room`);\n    setRemoteSocketId(id);\n  }, []);\n  const handleCallUser = useCallback(async () => {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: true\n    });\n    const offer = await peer.getOffer(); // console.log(offer);\n\n    socket.emit(\"user:call\", {\n      to: remoteSocketId,\n      offer\n    });\n    setMyStream(stream);\n  }, [remoteSocketId, socket]);\n  const handleIncommingCall = useCallback(async _ref2 => {\n    let {\n      from,\n      offer\n    } = _ref2;\n    setRemoteSocketId(from);\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: true\n    });\n    setMyStream(stream);\n    console.log(`Incoming Call`, from, offer);\n    const ans = await peer.getAnswer(offer);\n    socket.emit(\"call:accepted\", {\n      to: from,\n      ans\n    });\n  }, [socket]);\n  const sendStreams = useCallback(() => {\n    for (const track of myStream.getTracks()) {\n      peer.peer.addTrack(track, myStream);\n    }\n  }, [myStream]);\n  const handleCallAccepted = useCallback(async _ref3 => {\n    let {\n      from,\n      ans\n    } = _ref3;\n    // as the call accepted add it to local description\n    peer.setLocalDescription(ans);\n    console.log(`Call Accepted `); // getting all the track\n    // socket <----------> socket Channel\n\n    for (const track of myStream.getTracks()) {\n      peer.peer.addTrack(track, myStream);\n    } // This will share my to other user\n\n  }, [myStream]);\n  const handleNegoNeeded = useCallback(async () => {\n    const offer = await peer.getOffer();\n    socket.emit(\"peer:nego:needed\", {\n      offer,\n      to: remoteSocketId\n    });\n  }, [remoteSocketId, socket]);\n  const handleNegoNeedIncomming = useCallback(async _ref4 => {\n    let {\n      from,\n      offer\n    } = _ref4;\n    const ans = await peer.getAnswer(offer);\n    socket.emit(\"peer:nego:done\", {\n      to: from,\n      ans\n    });\n  }, [socket]);\n  const handleNegoNeedFinal = useCallback(async _ref5 => {\n    let {\n      ans\n    } = _ref5;\n    await peer.setLocalDescription(ans);\n  }, []);\n  useEffect(() => {\n    peer.peer.addEventListener(\"negotiationneeded\", handleNegoNeeded);\n    return () => {\n      peer.peer.removeEventListener(\"negotiationneeded\", handleNegoNeeded);\n    };\n  }, [handleNegoNeeded]);\n  useEffect(() => {\n    peer.peer.addEventListener(\"track\", async e => {\n      const remoteStream = e.streams;\n      setRemoteStream(remoteStream);\n    });\n  }, []);\n  useEffect(() => {\n    socket.on(\"user:joined\", handleUserJoined);\n    socket.on(\"incomming:call\", handleIncommingCall);\n    socket.on(\"call:accepted\", handleCallAccepted);\n    socket.on(\"peer:nego:needed\", handleNegoNeedIncomming);\n    socket.on(\"peer:nego:final\", handleNegoNeedFinal);\n    return () => {\n      socket.off(\"user:joined\", handleUserJoined);\n      socket.off(\"incomming:call\", handleIncommingCall);\n      socket.off(\"call:accepted\", handleCallAccepted);\n      socket.off(\"peer:nego:needed\", handleNegoNeedIncomming);\n      socket.off(\"peer:nego:final\", handleNegoNeedFinal);\n    };\n  }, [socket, handleUserJoined, handleIncommingCall, handleCallAccepted, handleNegoNeeded, handleNegoNeedFinal]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: remoteSocketId ? \"Connected\" : \"No one in room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this), myStream && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendStreams,\n      children: \"Send Stream\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 22\n    }, this), remoteSocketId ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCallUser,\n      children: \"CALL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 25\n    }, this) : \"\", myStream && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"My Stream\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ReactPlayer, {\n        playing: true,\n        muted: true,\n        height: \"100px\",\n        width: \"200px\",\n        url: myStream\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), remoteStream && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Remote Stream\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ReactPlayer, {\n        playing: true,\n        muted: true,\n        height: \"100px\",\n        width: \"200px\",\n        url: remoteStream\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n};\n\n_s(RoomPage, \"HYNJFMOwT23MBRlzor1ttGkhyEE=\", false, function () {\n  return [useSocket];\n});\n\n_c = RoomPage;\nexport default RoomPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"RoomPage\");","map":{"version":3,"sources":["C:/Users/gaura/OneDrive/Desktop/logins/client/src/components/Main/Screen.jsx"],"names":["React","useEffect","useCallback","useState","ReactPlayer","useSocket","peer","RoomPage","remoteSocketId","setRemoteSocketId","myStream","setMyStream","remoteStream","setRemoteStream","socket","handleUserJoined","email","id","console","log","handleCallUser","stream","navigator","mediaDevices","getUserMedia","audio","video","offer","getOffer","emit","to","handleIncommingCall","from","ans","getAnswer","sendStreams","track","getTracks","addTrack","handleCallAccepted","setLocalDescription","handleNegoNeeded","handleNegoNeedIncomming","handleNegoNeedFinal","addEventListener","removeEventListener","e","streams","on","off"],"mappings":"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","sourcesContent":["import React,{useEffect,useCallback,useState} from \"react\";\r\nimport ReactPlayer from \"react-player\";\r\nimport {useSocket} from \"../../context/SocketProvider\";\r\nimport peer from \"../../service/peer\";// return object:0\r\n\r\n\r\n\r\n\r\nconst RoomPage=()=>{\r\n    const [remoteSocketId,setRemoteSocketId]=useState(null);\r\n    const [myStream,setMyStream]=useState();\r\n    const [remoteStream, setRemoteStream] = useState();\r\n    \r\n    const socket=useSocket();\r\n    const handleUserJoined=useCallback(({email,id})=>{\r\n        console.log(`Email ${email} joined room`);\r\n        setRemoteSocketId(id);\r\n    },[]);\r\n    \r\n    const handleCallUser=useCallback(async()=>{\r\n        const stream=await navigator.mediaDevices.getUserMedia({\r\n            audio:true,\r\n            video:true,\r\n        });\r\n        const offer=await peer.getOffer();\r\n        // console.log(offer);\r\n        socket.emit(\"user:call\",{to:remoteSocketId,offer});\r\n\r\n\r\n        setMyStream(stream);\r\n    },[remoteSocketId,socket])\r\n    \r\n    const handleIncommingCall = useCallback(\r\n        async ({ from, offer }) => {\r\n          setRemoteSocketId(from);\r\n          const stream = await navigator.mediaDevices.getUserMedia({\r\n            audio: true,\r\n            video: true,\r\n          });\r\n          setMyStream(stream);\r\n          console.log(`Incoming Call`, from, offer);\r\n          const ans = await peer.getAnswer(offer);\r\n          socket.emit(\"call:accepted\", { to: from, ans });\r\n        },\r\n        [socket]\r\n      );\r\n\r\n      const sendStreams = useCallback(() => {\r\n        for (const track of myStream.getTracks()) {\r\n          peer.peer.addTrack(track, myStream);\r\n        }\r\n      }, [myStream]);\r\n\r\n    const handleCallAccepted=useCallback(async({from,ans})=>{\r\n        // as the call accepted add it to local description\r\n        peer.setLocalDescription(ans);\r\n        console.log(`Call Accepted `);\r\n        // getting all the track\r\n        // socket <----------> socket Channel\r\n        for(const track of myStream.getTracks()){\r\n            peer.peer.addTrack(track,myStream)\r\n        }\r\n        // This will share my to other user\r\n\r\n    },[myStream]);\r\n\r\n    const handleNegoNeeded = useCallback(async () => {\r\n      const offer = await peer.getOffer();\r\n      socket.emit(\"peer:nego:needed\", { offer, to: remoteSocketId });\r\n    }, [remoteSocketId, socket]);\r\n\r\n    const handleNegoNeedIncomming = useCallback(\r\n      async ({ from, offer }) => {\r\n        const ans = await peer.getAnswer(offer);\r\n        socket.emit(\"peer:nego:done\", { to: from, ans });\r\n      },\r\n      [socket]\r\n    );\r\n\r\n\r\n    const handleNegoNeedFinal = useCallback(async ({ ans }) => {\r\n      await peer.setLocalDescription(ans);\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n      peer.peer.addEventListener(\"negotiationneeded\", handleNegoNeeded);\r\n      return () => {\r\n        peer.peer.removeEventListener(\"negotiationneeded\", handleNegoNeeded);\r\n      };\r\n    }, [handleNegoNeeded]);\r\n\r\n    useEffect(()=>{\r\n        peer.peer.addEventListener(\"track\", async(e)=>{\r\n            const remoteStream=e.streams;\r\n            setRemoteStream(remoteStream);\r\n        })\r\n    },[])\r\n    \r\n\r\n    useEffect(()=>{\r\n        socket.on(\"user:joined\",handleUserJoined);\r\n        socket.on(\"incomming:call\",handleIncommingCall);\r\n        socket.on(\"call:accepted\",handleCallAccepted);\r\n        socket.on(\"peer:nego:needed\", handleNegoNeedIncomming);\r\n        socket.on(\"peer:nego:final\", handleNegoNeedFinal);\r\n        return ()=>{\r\n            socket.off(\"user:joined\",handleUserJoined);\r\n            socket.off(\"incomming:call\",handleIncommingCall);\r\n            socket.off(\"call:accepted\",handleCallAccepted);\r\n            socket.off(\"peer:nego:needed\", handleNegoNeedIncomming);\r\n            socket.off(\"peer:nego:final\", handleNegoNeedFinal);\r\n\r\n\r\n        }\r\n    },[socket,handleUserJoined,handleIncommingCall,handleCallAccepted,handleNegoNeeded,handleNegoNeedFinal])\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"app\">\r\n        <h4>{remoteSocketId?\"Connected\":\"No one in room\"}</h4>\r\n        {myStream && <button onClick={sendStreams}>Send Stream</button>}\r\n        {remoteSocketId?<button onClick={handleCallUser}>CALL</button>:\"\"}\r\n        {myStream && (\r\n        <>\r\n          <h1>My Stream</h1>\r\n          <ReactPlayer\r\n            playing\r\n            muted\r\n            \r\n            height=\"100px\"\r\n            width=\"200px\"\r\n            url={myStream}\r\n          />\r\n        </>\r\n\r\n        \r\n      )} \r\n       {remoteStream && (\r\n        <>\r\n          <h1>Remote Stream</h1>\r\n          <ReactPlayer\r\n            playing\r\n            muted\r\n            height=\"100px\"\r\n            width=\"200px\"\r\n            url={remoteStream}\r\n          />\r\n        </>\r\n      )}\r\n      \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default RoomPage;"]},"metadata":{},"sourceType":"module"}